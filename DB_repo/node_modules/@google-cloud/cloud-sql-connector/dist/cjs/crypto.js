"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateKeys = generateKeys;
exports.parseCert = parseCert;
const node_util_1 = require("node:util");
const node_crypto_1 = require("./node-crypto");
const errors_1 = require("./errors");
// The following is a fallback certificate parser for node14 to work around
// its lack of support to the X509Certificate class parser, this block of code
// can be safely removed once node14 is no longer supported, along with any
// `node14ParseCert` call and its unit tests.
// --- node@14 cert parse fallback start
const node_net_1 = __importDefault(require("node:net"));
const node_tls_1 = __importDefault(require("node:tls"));
const node14ParseCert = (cert) => {
    const isPeerCertificate = (obj) => obj.valid_to !== undefined;
    let socket;
    let parsed;
    try {
        socket = new node_tls_1.default.TLSSocket(new node_net_1.default.Socket(), {
            secureContext: node_tls_1.default.createSecureContext({ cert }),
        });
        parsed = socket.getCertificate();
    }
    catch (err) {
        throw new errors_1.CloudSQLConnectorError({
            message: 'Failed to parse as X.509 certificate.',
            code: 'EPARSESQLADMINEPH',
            errors: [err],
        });
    }
    if (parsed && isPeerCertificate(parsed)) {
        const expirationTime = parsed.valid_to;
        socket.destroy();
        socket = undefined;
        parsed = undefined;
        return {
            cert,
            expirationTime,
        };
    }
    /* c8 ignore next 5 */
    throw new errors_1.CloudSQLConnectorError({
        message: 'Could not read ephemeral certificate.',
        code: 'EPARSESQLADMINEPH',
    });
};
// --- node@14 cert parse fallback end
async function generateKeys() {
    const crypto = await (0, node_crypto_1.cryptoModule)();
    const keygen = (0, node_util_1.promisify)(crypto.generateKeyPair);
    const { privateKey, publicKey } = await keygen('rsa', {
        modulusLength: 2048,
        privateKeyEncoding: {
            type: 'pkcs1',
            format: 'pem',
        },
        publicKeyEncoding: {
            type: 'spki',
            format: 'pem',
        },
    });
    return {
        privateKey,
        publicKey,
    };
}
async function parseCert(cert) {
    const { X509Certificate } = await (0, node_crypto_1.cryptoModule)();
    if (X509Certificate) {
        try {
            const parsed = new X509Certificate(cert);
            if (parsed && parsed.validTo) {
                return {
                    cert,
                    expirationTime: parsed.validTo,
                };
            }
            throw new errors_1.CloudSQLConnectorError({
                message: 'Could not read ephemeral certificate.',
                code: 'EPARSESQLADMINEPH',
            });
        }
        catch (err) {
            throw new errors_1.CloudSQLConnectorError({
                message: 'Failed to parse as X.509 certificate.',
                code: 'EPARSESQLADMINEPH',
                errors: [err],
            });
        }
    }
    return node14ParseCert(cert);
}
//# sourceMappingURL=crypto.js.map